--  DaDaPush Public API
--  DaDaPush: Real_time Notifications App Send real_time notifications through our API without coding and maintaining your own app for iOS or Android devices.
--
--  The version of the OpenAPI document: v1
--  Contact: contacts@dadapush.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 4.0.2.
--  https://openapi-generator.tech
--  Do not edit the class manually.

with Swagger.Streams;
package body .Clients is

   --  push Message to a Channel
   --  <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>30 request per 1m</li><li>500 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
   procedure Create_Message
      (Client : in out Client_Type;
       P_Body : in .Models.MessagePushRequestType;
       X_Channel_Token : in Swagger.Nullable_UString;
       Result : out .Models.ResultOfMessagePushResponseType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Set_Path ("/api/v1/message");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Create_Message;

   --  delete a Channel Message
   --  <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
   procedure Delete_Message
      (Client : in out Client_Type;
       Message_Id : in Swagger.Long;
       X_Channel_Token : in Swagger.Nullable_UString;
       Result : out .Models.ResultType) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/api/v1/message/{messageId}");
      URI.Set_Path_Param ("messageId", Swagger.To_String (Message_Id));
      Client.Call (Swagger.Clients.DELETE, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Delete_Message;

   --  get a Channel Message
   --  <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
   procedure Get_Message
      (Client : in out Client_Type;
       Message_Id : in Swagger.Long;
       X_Channel_Token : in Swagger.Nullable_UString;
       Result : out .Models.ResultOfMessageObjectType) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/api/v1/message/{messageId}");
      URI.Set_Path_Param ("messageId", Swagger.To_String (Message_Id));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Message;

   --  get Message List
   --  <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>45 request per 1m</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
   procedure Get_Messages
      (Client : in out Client_Type;
       Page : in Integer;
       Page_Size : in Integer;
       X_Channel_Token : in Swagger.Nullable_UString;
       Result : out .Models.ResultOfPageResponseOfMessageObjectType) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("page", Page);
      URI.Add_Param ("pageSize", Page_Size);
      URI.Set_Path ("/api/v1/messages");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Messages;
end .Clients;
